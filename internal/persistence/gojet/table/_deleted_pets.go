//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var DeletedPets = newDeletedPetsTable("public", "_deleted_pets", "")

type deletedPetsTable struct {
	postgres.Table

	//Columns
	ID        postgres.ColumnString
	APIID     postgres.ColumnInteger
	CreatedAt postgres.ColumnTimestampz
	UpdatedAt postgres.ColumnTimestampz
	DeletedAt postgres.ColumnTimestampz
	Name      postgres.ColumnString
	Tag       postgres.ColumnString
	DeletedID postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type DeletedPetsTable struct {
	deletedPetsTable

	EXCLUDED deletedPetsTable
}

// AS creates new DeletedPetsTable with assigned alias
func (a DeletedPetsTable) AS(alias string) *DeletedPetsTable {
	return newDeletedPetsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DeletedPetsTable with assigned schema name
func (a DeletedPetsTable) FromSchema(schemaName string) *DeletedPetsTable {
	return newDeletedPetsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DeletedPetsTable with assigned table prefix
func (a DeletedPetsTable) WithPrefix(prefix string) *DeletedPetsTable {
	return newDeletedPetsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DeletedPetsTable with assigned table suffix
func (a DeletedPetsTable) WithSuffix(suffix string) *DeletedPetsTable {
	return newDeletedPetsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDeletedPetsTable(schemaName, tableName, alias string) *DeletedPetsTable {
	return &DeletedPetsTable{
		deletedPetsTable: newDeletedPetsTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newDeletedPetsTableImpl("", "excluded", ""),
	}
}

func newDeletedPetsTableImpl(schemaName, tableName, alias string) deletedPetsTable {
	var (
		IDColumn        = postgres.StringColumn("id")
		APIIDColumn     = postgres.IntegerColumn("api_id")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn = postgres.TimestampzColumn("updated_at")
		DeletedAtColumn = postgres.TimestampzColumn("deleted_at")
		NameColumn      = postgres.StringColumn("name")
		TagColumn       = postgres.StringColumn("tag")
		DeletedIDColumn = postgres.StringColumn("_deleted_id")
		allColumns      = postgres.ColumnList{IDColumn, APIIDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, NameColumn, TagColumn, DeletedIDColumn}
		mutableColumns  = postgres.ColumnList{IDColumn, APIIDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, NameColumn, TagColumn}
	)

	return deletedPetsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		APIID:     APIIDColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,
		DeletedAt: DeletedAtColumn,
		Name:      NameColumn,
		Tag:       TagColumn,
		DeletedID: DeletedIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
