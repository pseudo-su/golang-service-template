// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pseudo-su/golang-service-template/internal/persistence (interfaces: PetsRepositoryInterface)

// Package pets is a generated GoMock package.
package pets

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	persistence "github.com/pseudo-su/golang-service-template/internal/persistence"
)

// MockPetsRepositoryInterface is a mock of PetsRepositoryInterface interface.
type MockPetsRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPetsRepositoryInterfaceMockRecorder
}

// MockPetsRepositoryInterfaceMockRecorder is the mock recorder for MockPetsRepositoryInterface.
type MockPetsRepositoryInterfaceMockRecorder struct {
	mock *MockPetsRepositoryInterface
}

// NewMockPetsRepositoryInterface creates a new mock instance.
func NewMockPetsRepositoryInterface(ctrl *gomock.Controller) *MockPetsRepositoryInterface {
	mock := &MockPetsRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockPetsRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPetsRepositoryInterface) EXPECT() *MockPetsRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreatePet mocks base method.
func (m *MockPetsRepositoryInterface) CreatePet(arg0 context.Context, arg1 *persistence.PetValues) (*persistence.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePet", arg0, arg1)
	ret0, _ := ret[0].(*persistence.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePet indicates an expected call of CreatePet.
func (mr *MockPetsRepositoryInterfaceMockRecorder) CreatePet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePet", reflect.TypeOf((*MockPetsRepositoryInterface)(nil).CreatePet), arg0, arg1)
}

// GetPetByAPIID mocks base method.
func (m *MockPetsRepositoryInterface) GetPetByAPIID(arg0 context.Context, arg1 int64) (*persistence.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPetByAPIID", arg0, arg1)
	ret0, _ := ret[0].(*persistence.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPetByAPIID indicates an expected call of GetPetByAPIID.
func (mr *MockPetsRepositoryInterfaceMockRecorder) GetPetByAPIID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPetByAPIID", reflect.TypeOf((*MockPetsRepositoryInterface)(nil).GetPetByAPIID), arg0, arg1)
}

// ListPets mocks base method.
func (m *MockPetsRepositoryInterface) ListPets(arg0 context.Context, arg1 *persistence.PaginationValues) ([]persistence.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPets", arg0, arg1)
	ret0, _ := ret[0].([]persistence.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPets indicates an expected call of ListPets.
func (mr *MockPetsRepositoryInterfaceMockRecorder) ListPets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPets", reflect.TypeOf((*MockPetsRepositoryInterface)(nil).ListPets), arg0, arg1)
}
