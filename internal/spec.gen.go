// Package internal provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/pseudo-su/oapi-ui-codegen DO NOT EDIT.
package internal

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"strings"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWTW/jNhP+K8S876EFFMvJFj3o1Ow2QA203aAN2sPWh4k0lriVSO5w5Ngw9N8LUvKX",
	"IjctNgX2ZIscztfzzEPuILeNs4aMeMh24POKGox/75gthz+OrSMWTXE5twWF35XlBgUy0Ebe3EACsnXU",
	"f1JJDF0CDXmPZbQeNr2wNiV0XQJMn1rNVED2ofd5tF8enNnHj5RL8HVP8jwXXYwz+fabyUwMNjEN2mDj",
	"6rD5C22Olvu0EhAsz+0KW0ICpq1rfAwLwi0lL5SjCxhCXqjkrtAS3P2GddtXcl7X56b7men1vRVq4p//",
	"M60gg/+lR6akA03SgEp3cILMuIUuxNNmZXu2GME8QkcN6hqy/dJ3pa3RlFeeeK1zuhJqXI1Cs9w2+/wy",
	"uGAECbQcnJVaqvYxnEmdp7awV75NLx3qEijI56ydaGsgg4dKe6W9QqOGFqr3jszt/UJ5R7kSq1pPCr1C",
	"xbQiJpOTeqrIKC/Iok2pUDm2oXmq9eH732T0h4EEap2T8XTEHX5aPMSuaomY/vqEZUmsAjJiORS/JvZ9",
	"Cdez+WwerK0jg05DBm/iUgIOpYoIpm7AtOyH6LwJP2ovCutaSUUqWkZnjGF/UUAGtfZy3284ZGxIiD1k",
	"H8aefrBPqkGzVZE7oXtM0rJRKMoaUqIbUl81uFHX8/nXEFgCGXxqibdHxGvdaIFkUKIzdt/Mk5dlp0vG",
	"af1eoSgXhGU64rA1EfD6n8RbhunyzhrfD+/NfL5nPpnYb3Su1nnsZ/rRh5x2J9FemC/fD9R5SbexnkLF",
	"iVN2tcetIiwiNjvYXBnaTMB9q2pt/gzgBLyDTfQVnBzLOO3GWEz6bFbY1vJqdfZ3zUShraGNo1yoUDTY",
	"JODbpkHennJ3qF+wDMSE+LnsEnDWT/TgHRMKhdElecb2PG7ex50gm+TlrS22r4npSP/7no5IdP2aAada",
	"+3Nb1wfI4QsCdYTOCNMu6fUs3TmSRdFd1LWFWVm1sqwwirle6XwS75KCuL3dLoqX9O2hIqWLMCmDVA4S",
	"x5rWB3EJqnuiLSFHOL1/+wfE5fH6j+VkCo+7PRr7wKEuVGusdViLI/AlEeQysmOuhGPE62k437XMZER9",
	"bxvU5vCkuHRZp+treH65vJeKeOyiEnE+S9NdEde7v3OZwBpZBzWIcPcnejYP3QZ0ejbcScPraISfEWKV",
	"t15so3oHUd+RywHw3UliWRrnJ7wkZr5/Wsy0jdUtDx18dmvE94E2ZbzWC6uetFR71T1y3UO37P4KAAD/",
	"/+Q07IlUDAAA",
}

// GetOpenAPISpec returns the Swagger specification corresponding to the generated code
// in this file.
func GetOpenAPISpec() (*openapi3.T, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewLoader().LoadFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
