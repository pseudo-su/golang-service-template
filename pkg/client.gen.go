// Package pkg provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package pkg

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

type DoFn func(r *http.Request) (*http.Response, error)

// RoundTripMiddleware lets you define functions that can intercept and manipulate
// the round trip of a single HTTP transaction
type RoundTripMiddleware func(next DoFn) DoFn

// DoFn returns the result of applying the middleware to the provided DoFn
func (rtm RoundTripMiddleware) DoFn(doFn DoFn) DoFn {
	return rtm(doFn)
}

func joinMiddleware(mw ...RoundTripMiddleware) RoundTripMiddleware {
	if len(mw) < 1 {
		return func(doFn DoFn) DoFn {
			return doFn
		}
	}
	middleware := mw[len(mw)-1]
	for i := len(mw) - 2; i >= 0; i-- {
		middleware = middleware.Wrap(mw[i])
	}
	return middleware
}

func (mw RoundTripMiddleware) Wrap(wrapMw RoundTripMiddleware) RoundTripMiddleware {
	return func(doFn DoFn) DoFn {
		return wrapMw(mw(doFn))
	}
}

// RoundTripMiddlewares allows configuring a RoundTripMiddleware for individual endpoints
type RoundTripMiddlewares struct {
	ListPets    RoundTripMiddleware
	CreatePets  RoundTripMiddleware
	ShowPetById RoundTripMiddleware
}

// operationDoFunctions lets the client store Do functions using different
// middleware for each operation
type operationDoFunctions struct {
	ListPets    DoFn
	CreatePets  DoFn
	ShowPetById DoFn
}

// generatedClient which conforms to the OpenAPI3 specification for this service.
type generatedClient struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A callback for modifying requests which are generated before sending over
	// the network.
	RequestEditor RequestEditorFn

	// SharedRoundTripMiddleware lets you apply a RoundTripMiddleware on all
	// operations.
	SharedRoundTripMiddleware RoundTripMiddleware

	// RoundTripMiddlewares lets you apply a RoundTripMiddleware on specific
	// operations.
	RoundTripMiddlewares RoundTripMiddlewares

	// operationDoers is the set of Do functions for each operation that is created
	// for the client.
	operationDoers *operationDoFunctions
}

var _ generatedClientInterface = &generatedClient{}

// clientOption allows setting custom parameters during construction
type clientOption func(*generatedClient) error

// newGeneratedClient Creates a new Client, with reasonable defaults
func newGeneratedClient(server string, opts ...clientOption) (*generatedClient, error) {
	// create a client with sane default values
	client := generatedClient{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = http.DefaultClient
	}

	client.operationDoers = setupOperationDoers(&client, client.RoundTripMiddlewares)

	return &client, nil
}

func setupOperationDoers(c *generatedClient, rtMiddlewares RoundTripMiddlewares) *operationDoFunctions {

	sharedMiddlewares := []RoundTripMiddleware{}

	if c.RequestEditor != nil {
		mw := newRequestEditorMiddleware(c.RequestEditor)
		sharedMiddlewares = append(sharedMiddlewares, mw)
	}

	if c.SharedRoundTripMiddleware != nil {
		sharedMiddlewares = append(sharedMiddlewares, c.SharedRoundTripMiddleware)
	}

	sharedMiddleware := joinMiddleware(sharedMiddlewares...)

	operationDoers := operationDoFunctions{}

	// ListPets
	if rtMiddlewares.ListPets != nil {
		mw := joinMiddleware(sharedMiddleware, rtMiddlewares.ListPets)
		operationDoers.ListPets = mw.DoFn(c.Client.Do)
	} else {
		operationDoers.ListPets = sharedMiddleware.DoFn(c.Client.Do)
	}
	// CreatePets
	if rtMiddlewares.CreatePets != nil {
		mw := joinMiddleware(sharedMiddleware, rtMiddlewares.CreatePets)
		operationDoers.CreatePets = mw.DoFn(c.Client.Do)
	} else {
		operationDoers.CreatePets = sharedMiddleware.DoFn(c.Client.Do)
	}
	// ShowPetById
	if rtMiddlewares.ShowPetById != nil {
		mw := joinMiddleware(sharedMiddleware, rtMiddlewares.ShowPetById)
		operationDoers.ShowPetById = mw.DoFn(c.Client.Do)
	} else {
		operationDoers.ShowPetById = sharedMiddleware.DoFn(c.Client.Do)
	}

	return &operationDoers
}

func newRequestEditorMiddleware(requestEditorFn RequestEditorFn) RoundTripMiddleware {
	return func(next DoFn) DoFn {
		return func(r *http.Request) (*http.Response, error) {
			err := requestEditorFn(r.Context(), r)
			if err != nil {
				return nil, err
			}
			return next(r)
		}
	}
}

// WithSharedRoundTripMiddleware add a middleware that applies to all routes
func WithSharedRoundTripMiddleware(rtm RoundTripMiddleware) clientOption {
	return func(c *generatedClient) error {
		c.SharedRoundTripMiddleware = rtm
		return nil
	}
}

// WithRoundTripMiddlewares Add middlewares that apply to specific routes
func WithRoundTripMiddlewares(rtMiddlewares RoundTripMiddlewares) clientOption {
	return func(c *generatedClient) error {
		c.RoundTripMiddlewares = rtMiddlewares
		return nil
	}
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) clientOption {
	return func(c *generatedClient) error {
		c.Client = doer
		return nil
	}
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) clientOption {
	return func(c *generatedClient) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) clientOption {
	return func(c *generatedClient) error {
		c.RequestEditor = fn
		return nil
	}
}

// The interface specification for the client above.
type generatedClientInterface interface {
	// ListPets request
	ListPets(ctx context.Context, params *ListPetsParams) (*http.Response, error)
	// ListPetsWithResponse request  and parse response
	ListPetsWithResponse(ctx context.Context, params *ListPetsParams) (*ListPetsResponse, error)

	// CreatePets request
	CreatePets(ctx context.Context) (*http.Response, error)
	// CreatePetsWithResponse request  and parse response
	CreatePetsWithResponse(ctx context.Context) (*CreatePetsResponse, error)

	// ShowPetById request
	ShowPetById(ctx context.Context, petId string) (*http.Response, error)
	// ShowPetByIdWithResponse request  and parse response
	ShowPetByIdWithResponse(ctx context.Context, petId string) (*ShowPetByIdResponse, error)
}

func (c *generatedClient) ListPets(ctx context.Context, params *ListPetsParams) (*http.Response, error) {
	req, err := NewListPetsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	return c.operationDoers.ListPets(req)
}

func (c *generatedClient) CreatePets(ctx context.Context) (*http.Response, error) {
	req, err := NewCreatePetsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	return c.operationDoers.CreatePets(req)
}

func (c *generatedClient) ShowPetById(ctx context.Context, petId string) (*http.Response, error) {
	req, err := NewShowPetByIdRequest(c.Server, petId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	return c.operationDoers.ShowPetById(req)
}

// NewListPetsRequest generates requests for ListPets
func NewListPetsRequest(server string, params *ListPetsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pets")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePetsRequest generates requests for CreatePets
func NewCreatePetsRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pets")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewShowPetByIdRequest generates requests for ShowPetById
func NewShowPetByIdRequest(server string, petId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "petId", petId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pets/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

type ListPetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Pets
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r ListPetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r CreatePetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ShowPetByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Pet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r ShowPetByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ShowPetByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListPetsWithResponse request returning *ListPetsResponse
func (c *generatedClient) ListPetsWithResponse(ctx context.Context, params *ListPetsParams) (*ListPetsResponse, error) {
	rsp, err := c.ListPets(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListPetsResponse(rsp)
}

// CreatePetsWithResponse request returning *CreatePetsResponse
func (c *generatedClient) CreatePetsWithResponse(ctx context.Context) (*CreatePetsResponse, error) {
	rsp, err := c.CreatePets(ctx)
	if err != nil {
		return nil, err
	}
	return ParseCreatePetsResponse(rsp)
}

// ShowPetByIdWithResponse request returning *ShowPetByIdResponse
func (c *generatedClient) ShowPetByIdWithResponse(ctx context.Context, petId string) (*ShowPetByIdResponse, error) {
	rsp, err := c.ShowPetById(ctx, petId)
	if err != nil {
		return nil, err
	}
	return ParseShowPetByIdResponse(rsp)
}

// ParseListPetsResponse parses an HTTP response from a ListPetsWithResponse call
func ParseListPetsResponse(rsp *http.Response) (*ListPetsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListPetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Pets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json"):
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreatePetsResponse parses an HTTP response from a CreatePetsWithResponse call
func ParseCreatePetsResponse(rsp *http.Response) (*CreatePetsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreatePetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json"):
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseShowPetByIdResponse parses an HTTP response from a ShowPetByIdWithResponse call
func ParseShowPetByIdResponse(rsp *http.Response) (*ShowPetByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ShowPetByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Pet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json"):
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}
