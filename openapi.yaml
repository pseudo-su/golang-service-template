openapi: "3.0.0"
info:
  version: 1.0.0
  title: Swagger Petstore
  license:
    name: MIT
  contact:
    name: golang-service-template
    email: contact@golang-service-template.com
    url: github.com/pseudo-su/golang-service-template
  description: |
    This is an example OpenAPI spec to use as a reference when starting a project using github.com/pseudo-su/golang-service-template
tags:
  - name: "pets"
    description: "All things to do with pets"
servers:
  - url: /golang-service-template/v1
    description: Current Domain
  - url: https://{domain}/golang-service-template/v1
    description: Other Domain
    variables:
      domain:
        description: Enter custom domain to target
        default: api.example.com
  - url: http://petstore.swagger.io/v1
paths:
  /pets:
    get:
      operationId: listPets
      summary: List all pets
      description: List all the pets
      tags:
        - pets
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A paged array of pets
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pets"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createPets
      summary: Create a pet
      description: Create a pet
      tags:
        - pets
      responses:
        '201':
          description: Null response
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /pets/{petId}:
    get:
      operationId: showPetById
      summary: Info for a specific pet
      description: Info for a specific pet
      tags:
        - pets
      parameters:
        - name: petId
          in: path
          required: true
          description: The id of the pet to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    Pet:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: string
    Pets:
      type: array
      items:
        $ref: "#/components/schemas/Pet"
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
